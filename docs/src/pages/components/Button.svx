<script>
  import { Button } from "carbon-components-svelte";
  import Add16 from "carbon-icons-svelte/lib/Add16";
  import TrashCan16 from "carbon-icons-svelte/lib/TrashCan16";
  import TextBold16 from "carbon-icons-svelte/lib/TextBold16";
  import TextItalic16 from "carbon-icons-svelte/lib/TextItalic16";
  import TextUnderline16 from "carbon-icons-svelte/lib/TextUnderline16";
  import Preview from "../../components/Preview.svelte";

  let index = 1;
</script>

### Primary button

<Button>Primary button</Button>

### Secondary button

<Button kind="secondary">Secondary button</Button>

### Tertiary button

<Button kind="tertiary">Tertiary button</Button>

### Ghost button

<Button kind="ghost">Ghost button</Button>

### Danger button

<Button kind="danger">Danger button</Button>

### Danger tertiary button

<Button kind="danger-tertiary">Danger tertiary button</Button>

### Danger tertiary, icon-only button

**Note:** you must provide an `iconDescription` for the button tooltip.

<Button kind="danger-tertiary"iconDescription="Delete" icon={TrashCan16} />

### Danger ghost button

<Button kind="danger-ghost">Danger ghost button</Button>

### Button with icon

<Button icon={Add16}>With icon</Button>

### Icon-only button

**Note:** you must provide an `iconDescription` for the button tooltip.

<Button iconDescription="Tooltip text" icon={Add16} />

### Icon-only button (custom tooltip position)

The tooltip position and alignment can be controlled by `tooltipPosition` and `tooltipAlignment`.

<Button tooltipPosition="right" tooltipAlignment="end" iconDescription="Tooltip text" icon={Add16} />

### Selected icon-only, ghost button

Set `isSelected` to `true` to enable the selected state for an icon-only, ghost button.

<Button isSelected={index === 0} kind="ghost" iconDescription="Bold" icon={TextBold16} on:click={() => (index = 0)} />
<Button isSelected={index === 1} kind="ghost" iconDescription="Italicize" icon={TextItalic16} on:click={() => (index = 1)} />
<Button isSelected={index === 2} kind="ghost" iconDescription="Underline" icon={TextUnderline16} on:click={() => (index = 2)} />

### Link button

If an `href` value is specified, the component will render an [anchor element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) with a "button" role.

<Button href="#">Link button</Button>

### Custom element

<Button as let:props>
  <p {...props}>Custom element</p>
</Button>

### Field button

<Button size="field">Primary</Button>
<Button size="field" kind="secondary">Secondary</Button>
<Button size="field" kind="tertiary">Tertiary</Button>
<Button size="field" kind="ghost">Ghost</Button>
<Button size="field" kind="danger">Danger</Button>

### Small button

<Button size="small">Primary</Button>
<Button size="small" kind="secondary">Secondary</Button>
<Button size="small" kind="tertiary">Tertiary</Button>
<Button size="small" kind="ghost">Ghost</Button>
<Button size="small" kind="danger">Danger</Button>

### Disabled button

<Button disabled>Disabled button</Button>

### Skeleton

<Button skeleton />
<Button skeleton size="field" />
<Button skeleton size="small" />